exports.createSocket = createSocket

/*
udp = udplib.createSocket("udp4", incomingDgram);
udp.bind(self.port ? parseInt(self.port) : 0, self.ip || '0.0.0.0');
udp.send(msg, 0, msg.length, this.port, this.ip);

//incoming packet callback
function incomingDgram(msg, rinfo)
*/

function createSocket(lib, incomingCallback, port, ip){
    switch(lib){
        case "node":
            return createNodeDgramSocket(incomingCallback, port, ip);
        case "enet":
            return createENetHost(incomingCallback, port, ip);

        //TODO
        case "chrome:udp":
        case "firefox":
        case "node.js on android/iphone":
        case "JS based mobile frameworks":

        default:
            return createNodeDgramSocket(incomingCallback, port, ip);
    }
}

function createNodeDgramSocket(cb,port,ip){
    var dgram = require('dgram');
    var socket =  dgram.createSocket("udp4",cb);
    socket.bind(port,ip);
    return socket;
}

function createENetHost(cb,port,ip){
    var enet = require('enet');
    var addr = new enet.Address(ip,port);
    var host = new enet.Host(addr,64);

    host.on("telex",cb);
    host.start_watcher();
    return ({
        enet:true,
        send:function(msg,start_index,length,port,ip){
            host.send(ip,port,msg);
        },
        close:function(){
            host.stop_watcher();            
        },
        host:host
    });
}
